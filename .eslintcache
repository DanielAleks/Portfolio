[{"C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\projects\\Projects.tsx":"1","C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\App.tsx":"2","C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\contact\\contact-cards\\ContactCards.tsx":"3","C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\navbar\\Navbar.tsx":"4"},{"size":8287,"mtime":1618475418231,"results":"5","hashOfConfig":"6"},{"size":2192,"mtime":1618475500667,"results":"7","hashOfConfig":"6"},{"size":2917,"mtime":1618476380816,"results":"8","hashOfConfig":"6"},{"size":2877,"mtime":1618477210241,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"t3z8zm",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\projects\\Projects.tsx",["20","21"],"C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\App.tsx",["22"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './components/style.sass'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Technologies from './components/technologies/Technologies';\nimport Projects from './components/projects/Projects';\nimport About from './components/about/About';\nimport Contact from './components/contact/Contact';\nimport Home from './components/home/Home';\nimport Navbar from './components/navbar/Navbar';\nimport AnotherWay from './components/contact/another-way/AnotherWay';\nimport ReactGa from 'react-ga';\n\nexport function useWindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowSize;\n}\n\nfunction App() {\n  const size = useWindowSize()\n  const [isNav, setIsNav] = useState(false)\n  const [isAnimated, setIsAnimated] = useState(false)\n\n  useEffect(() => {\n    size.width <= 900 ? setIsNav(false) : setIsNav(true)\n  }, [size.width])\n\n  useEffect(() => {\n    ReactGa.initialize('UA-190747385-1')\n    ReactGa.pageview('/')\n  }, []);\n\n  return (\n    <Router>\n      <div>\n        <Navbar\n          isAnimated={isAnimated}\n          setIsAnimated={setIsAnimated}\n          setIsNav={setIsNav}\n          isNav={isNav} size={size}\n        />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/tech\">\n            <Technologies />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/another-way\">\n            <AnotherWay />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n// <Main />\n\nexport default App;\n","C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\contact\\contact-cards\\ContactCards.tsx",["23","24","25","26"],"C:\\Users\\denni\\Documents\\code\\React\\portfolio\\src\\components\\navbar\\Navbar.tsx",["27"],"import React, { useState } from 'react'\r\nimport './navbar.sass'\r\nimport { Link } from \"react-router-dom\";\r\nimport { GiHamburgerMenu } from 'react-icons/gi'\r\nimport ReactGA from 'react-ga'\r\n\r\nfunction Navbar({ setIsNav, isNav, size, isAnimated, setIsAnimated }) {\r\n\r\n\r\n  const onAboutHandler = () => {\r\n    ReactGA.event({\r\n      category: 'Route About',\r\n      action: 'went to route /about'\r\n    });\r\n  }\r\n  const onProjectsHandler = () => {\r\n    ReactGA.event({\r\n      category: 'Route Projects',\r\n      action: 'went to route /projects'\r\n    });\r\n  }\r\n  const onTechHandler = () => {\r\n    ReactGA.event({\r\n      category: 'Route Technology',\r\n      action: 'went to route /tech'\r\n    });\r\n  }\r\n  const onContactHandler = () => {\r\n    ReactGA.event({\r\n      category: 'Route Contact',\r\n      action: 'went to route /contact'\r\n    });\r\n  }\r\n\r\n  const GaHandler = (id) => {\r\n    if (id === 1) {\r\n      onAboutHandler()\r\n    } else if (id === 2) {\r\n      onProjectsHandler()\r\n    } else if (id === 3) {\r\n      onTechHandler()\r\n    } else if (id === 4) {\r\n      onContactHandler()\r\n    }\r\n  }\r\n\r\n  const closeMobileNav = () => {\r\n    setIsAnimated(!isAnimated)\r\n    if (size.width < 900) {\r\n      if (!isNav) {\r\n        setIsNav(!isNav)\r\n      } else\r\n        setTimeout(() => {\r\n          setIsNav(!isNav)\r\n        }, 500)\r\n    } else setIsNav(isNav)\r\n  }\r\n\r\n  const animationDelayMe = (id) => {\r\n    if (size.width < 900) {\r\n      if (isAnimated) {\r\n        return id * .02\r\n      } else if (id === 0) {\r\n        return .1\r\n      } else if (id === 1) {\r\n        return .075\r\n      } else if (id === 2) {\r\n        return .05\r\n      } else if (id === 3) {\r\n        return .025\r\n      } else if (id === 4) {\r\n        return 0\r\n      }\r\n    } else return id * .1\r\n  }\r\n\r\n  const navItems = [\r\n    { name: 'Home', to: '/' },\r\n    { name: 'About', to: '/about' },\r\n    { name: 'Projects', to: '/projects' },\r\n    { name: 'Technologies', to: '/tech' },\r\n    { name: 'Contact', to: '/contact' }\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {size.width < 900 &&\r\n        <div className='mobile-nav-container'>\r\n          <div\r\n            onClick={closeMobileNav}\r\n            className='nav-icon-container'\r\n          >\r\n            <GiHamburgerMenu\r\n              onClick={closeMobileNav}\r\n              size={30} className='navbar-icon'\r\n            />\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n      <nav onClick={closeMobileNav} className='nav-container'>\r\n        {isNav &&\r\n          <>\r\n            {navItems.map((item, id) =>\r\n              <Link\r\n                onClick={() => GaHandler(id)}\r\n                style={{ animationDelay: `${animationDelayMe(id)}s` }}\r\n                className={isAnimated ? 'nav-item' : 'nav-item-off'}\r\n                to={item.to}>{item.name}</Link>\r\n            )}\r\n          </>\r\n        }\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n",{"ruleId":"28","severity":1,"message":"29","line":35,"column":8,"nodeType":"30","messageId":"31","endLine":35,"endColumn":19},{"ruleId":"32","severity":1,"message":"33","line":174,"column":13,"nodeType":"34","endLine":177,"endColumn":33},{"ruleId":"28","severity":1,"message":"35","line":8,"column":3,"nodeType":"30","messageId":"31","endLine":8,"endColumn":7},{"ruleId":"28","severity":1,"message":"36","line":12,"column":9,"nodeType":"30","messageId":"31","endLine":12,"endColumn":13},{"ruleId":"37","severity":1,"message":"38","line":84,"column":115,"nodeType":"39","endLine":84,"endColumn":130},{"ruleId":"32","severity":1,"message":"33","line":85,"column":17,"nodeType":"34","endLine":85,"endColumn":64},{"ruleId":"32","severity":1,"message":"33","line":95,"column":15,"nodeType":"34","endLine":95,"endColumn":35},{"ruleId":"28","severity":1,"message":"40","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'AngularLogo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'size' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useState' is defined but never used."]